name: Install dependencies

description: Install default dependencies
inputs:
  latest:
    default: false
    description: Install latest version
  path:
    default: .
    description: Working directory

runs:
  using: composite
  steps:
    - id: prepare
      name: Prepare
      run: echo has-eslint=`if [ -f ./.eslintrc.react.yml ]; then echo true; else echo false; fi` >> $GITHUB_OUTPUT
      shell: bash
      working-directory: ${{ inputs.path }}

    - env:
        VERSION_TAG: ${{ inputs.latest == 'true' && '@latest' || '' }}
      name: Run npm install for bot/production
      run: |
        npm install \
          --save \
          --workspace=@npm-workspace/bot \
          botbuilder${{ env.VERSION_TAG }} \
          dotenv${{ env.VERSION_TAG }} \
          pretty-ms${{ env.VERSION_TAG }}
      shell: bash
      working-directory: ${{ inputs.path }}

    - env:
        VERSION_TAG: ${{ inputs.latest == 'true' && '@latest' || '' }}
      name: Run npm install for nodejs/production
      run: |
        npm install \
          --save \
          --workspace=@npm-workspace/nodejs \
          @npm-workspace/bot@0.0.0-0 \
          express${{ env.VERSION_TAG }} \
          math-random${{ env.VERSION_TAG }} \
          valibot${{ env.VERSION_TAG }} \
          ws${{ env.VERSION_TAG }}
      shell: bash
      working-directory: ${{ inputs.path }}

    - env:
        VERSION_TAG: ${{ inputs.latest == 'true' && '@latest' || '' }}
      name: Run npm install for pages/production
      run: |
        npm install \
          --save \
          --workspace=@npm-workspace/pages \
          @npm-workspace/web@0.0.0-0 \
          assert${{ env.VERSION_TAG }} \
          botframework-webchat${{ env.VERSION_TAG }} \
          buffer${{ env.VERSION_TAG }} \
          constants@npm:constants-browserify${{ env.VERSION_TAG }} \
          crypto@npm:crypto-browserify${{ env.VERSION_TAG }} \
          http@npm:stream-http${{ env.VERSION_TAG }} \
          https@npm:https-browserify${{ env.VERSION_TAG }} \
          os@npm:os-browserify${{ env.VERSION_TAG }} \
          path@npm:path-browserify${{ env.VERSION_TAG }} \
          react-dom${{ env.VERSION_TAG }} \
          react${{ env.VERSION_TAG }} \
          stream@npm:stream-browserify${{ env.VERSION_TAG }} \
          string_decoder${{ env.VERSION_TAG }} \
          timers@npm:timers-browserify${{ env.VERSION_TAG }} \
          url${{ env.VERSION_TAG }} \
          util${{ env.VERSION_TAG }} \
          web${{ env.VERSION_TAG }}
      shell: bash
      working-directory: ${{ inputs.path }}

    - env:
        VERSION_TAG: ${{ inputs.latest == 'true' && '@latest' || '' }}
      name: Run npm install for web/production
      run: |
        npm install \
          --save \
          --workspace=@npm-workspace/web \
          @npm-workspace/bot@0.0.0-0 \
          botbuilder${{ env.VERSION_TAG }} \
          math-random${{ env.VERSION_TAG }} \
          pretty-ms${{ env.VERSION_TAG }} \
          valibot${{ env.VERSION_TAG }}
      shell: bash
      working-directory: ${{ inputs.path }}

    - env:
        VERSION_TAG: ${{ inputs.latest == 'true' && '@latest' || '' }}
      name: Run npm install for */development
      run: |
        npm install \
          --save-dev \
          --workspaces \
          @tsconfig/strictest${{ env.VERSION_TAG }} \
          eslint${{ env.VERSION_TAG }} \
          eslint-config-standard${{ env.VERSION_TAG }} \
          eslint-plugin-import${{ env.VERSION_TAG }} \
          eslint-plugin-prettier${{ env.VERSION_TAG }} \
          eslint-plugin-promise${{ env.VERSION_TAG }} \
          eslint-plugin-standard${{ env.VERSION_TAG }} \
          prettier${{ env.VERSION_TAG }} \
          typescript${{ env.VERSION_TAG }}
      shell: bash
      working-directory: ${{ inputs.path }}

    - env:
        VERSION_TAG: ${{ inputs.latest == 'true' && '@latest' || '' }}
      name: Run npm install for bot/development
      run: |
        npm install \
          --save-dev \
          --workspace=@npm-workspace/bot \
          tsup${{ env.VERSION_TAG }}
      shell: bash
      working-directory: ${{ inputs.path }}

    - env:
        VERSION_TAG: ${{ inputs.latest == 'true' && '@latest' || '' }}
      name: Run npm install for nodejs/development
      run: |
        npm install \
          --save-dev \
          --workspace=@npm-workspace/nodejs \
          @types/express${{ env.VERSION_TAG }} \
          @types/math-random${{ env.VERSION_TAG }} \
          @types/node${{ env.VERSION_TAG }} \
          eslint-plugin-node${{ env.VERSION_TAG }} \
          tsup${{ env.VERSION_TAG }}
      shell: bash
      working-directory: ${{ inputs.path }}

    - env:
        VERSION_TAG: ${{ inputs.latest == 'true' && '@latest' || '' }}
      name: Run npm install for pages/development
      run: |
        npm install \
          --save-dev \
          --workspace=@npm-workspace/pages \
          @types/math-random${{ env.VERSION_TAG }} \
          @types/react${{ env.VERSION_TAG }} \
          @types/react-dom${{ env.VERSION_TAG }} \
          eslint-plugin-react${{ env.VERSION_TAG }} \
          esbuild${{ env.VERSION_TAG }}
      shell: bash
      working-directory: ${{ inputs.path }}

    - env:
        VERSION_TAG: ${{ inputs.latest == 'true' && '@latest' || '' }}
      name: Run npm install for web/development
      run: |
        npm install \
          --save-dev \
          --workspace=@npm-workspace/web \
          @types/math-random${{ env.VERSION_TAG }} \
          botframework-directlinejs${{ env.VERSION_TAG }} \
          tsup${{ env.VERSION_TAG }}
      shell: bash
      working-directory: ${{ inputs.path }}

    - env:
        VERSION_TAG: ${{ inputs.latest == 'true' && '@latest' || '' }}
      name: Run npm install for root/development
      run: |
        npm install \
          --save-dev \
          nodemon${{ env.VERSION_TAG }}
      shell: bash
      working-directory: ${{ inputs.path }}

    - continue-on-error: true
      name: Run npm audit fix
      run: npm audit fix --workspaces
      shell: bash
      working-directory: ${{ inputs.path }}
